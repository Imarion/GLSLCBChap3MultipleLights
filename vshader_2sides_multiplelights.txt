#version 430

layout (location = 0) in  vec3 VertexPosition;
layout (location = 1) in  vec3 VertexNormal;

out vec3 FrontColor;
out vec3 BackColor;

struct LightInfo {
    vec4 Position;  // Light position in eye coords
    vec3 Intensity;
};

uniform LightInfo Lights[5];

struct MaterialInfo {
    vec3  Ka;        // Ambient  reflectivity
    vec3  Kd;        // Diffuse  reflectivity
    vec3  Ks;        // Specular reflectivity
    float Shininess; // Specular shininess factor
};

uniform MaterialInfo Material;

uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform mat4 MVP;                // Projection * Modelview

vec3 phongModel( int lightIndex, vec4 position, vec3 normal ) {
    vec3 s         = normalize(vec3(Lights[lightIndex].Position - position));
    vec3 v         = normalize(-position.xyz); // In eyeCoords, the viewer is at the origin -> only take negation of eyeCoords vector
    vec3 r         = reflect (-s, normal);
    vec3 li        = Lights[lightIndex].Intensity;

    float sDotN    = max(dot(s, normal), 0.0);

    vec3  ambient  = Material.Ka;
    vec3  diffuse  = Material.Kd * sDotN;
    vec3  spec     = vec3(0.0);
    if (sDotN > 0.0) {
        spec = Material.Ks * pow(max(dot(r,v), 0.0), Material.Shininess);
    }

    return li * (ambient + diffuse + spec);
}


void main()
{
    // Convert normal and position to eye coords.
    vec3 tnorm     = normalize(NormalMatrix * VertexNormal);
    vec4 eyeCoords = ModelViewMatrix * vec4(VertexPosition, 1.0);

    FrontColor = vec3(0.0);
    BackColor  = vec3(0.0);
    for (int i=0; i<5; i++)
    {
        FrontColor += phongModel(i, eyeCoords,  tnorm );
        BackColor  += phongModel(i, eyeCoords, -tnorm );
    }
    gl_Position = MVP * vec4(VertexPosition, 1.0);
}
